class {{ class_name }}Controller < ApplicationController
  getter {{ name }} = {{ class_name }}.new

  before_action do
    only [:show, :edit, :update, :destroy] { set_{{ name }} }
  end

  def index
    if params["field"]? && params["value"]?
      {{ name | pluralize }} = {{ class_name }}.where(field: params["field"], operator: :eq, value: params["value"]).select
    else
      {{ name | pluralize }} = {{ class_name }}.all
    end
    respond_with do
      html render_module("index.{{language}}")
      json {{ name | pluralize }}.to_json
    end
  end

  def show
    respond_with do
      html render_module("show.{{ language }}")
      json {{ name }}.to_json
    end
  end

  def new
    render_module("new.{{ language }}")
  end

  def create
    {{ name }} = {{ class_name }}.new({{ name }}_params.validate!)
    if {{ name }}.save
      respond_with do
        html ->{ redirect_to action: :index, flash: {"success" => "Created {{ class_name }} successfully."} }
        json {{ name }}.to_json
      end
    else
      error = {errors: {{ name }}.errors.map { |e| e.to_s }}
      flash["danger"] = "Could not create {{ class_name }}!"
      respond_with 400 do
        html render_module("new.{{ language }}")
        json error.to_json
      end
    end
  end

  def edit
    render_module("edit.{{ language }}")
  end

  def update
    {{ name }}.set_attributes({{ name }}_params.validate!)
    if {{ name }}.save
      respond_with do
        html ->{ redirect_to action: :index, flash: {"success" => "Updated {{ class_name }} successfully."} }
        json {{ name }}.to_json
      end
    else
      error = {errors: {{ name }}.errors.map { |e| e.to_s }}
      flash["danger"] = "Could not update {{ class_name }}!"
      respond_with 400 do
        html render_module("edit.{{ language }}")
        json error.to_json
      end
    end
  end

  def destroy
    {{ name }}.destroy
    msg = "{{ class_name }} with ID #{params["id"]} deleted"
    result = {result: msg}
    respond_with do
      html ->{ redirect_to action: :index, flash: {"success" => msg} }
      json result.to_json
    end
  end

  private def {{ name }}_params
    params.validation do
    {% for field in visible_fields -%}
    {{"  "}}required(:{{ field.name }}{% if field.type == "reference" %}_id{% endif %}) { |f| !f.nil? }
    {% endfor -%}
    end
  end

  private def set_{{ name }}
    @{{ name }} = {{ class_name }}.find! params["id"]
  end
end
