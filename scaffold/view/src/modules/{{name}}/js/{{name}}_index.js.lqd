import Amber from 'amber';
import React from 'react';
import { Link } from 'react-router-dom';
import PropTypes from "prop-types";

import Resource from '../../../lib/js/resource';
import ResourceStream from '../../../lib/js/resourceStream';
import {EventBus} from '../../../lib/js/eventBus';
import {bestTitleForClass} from '../../../lib/js/utils';

import { {{class_name}} } from './{{name}}'

export class {{class_name}}Index extends React.Component {
  constructor({{name | pluralize}}) {
    super();

    this.{{name | pluralize}} = {}
    this.state = {
      list: [],
      sort_column: 'id',
      sort_direction: 'up'
    };

    {% for field in visible_fields -%}
    {% if field.type == "reference" -%}
    {% if field.name != "user" -%}
    {{" "}}
    this.state.{{field.name | pluralize}} = []
    {% endif -%}
    {% endif -%}
    {% endfor %}
  }

  sort(event) {

    if (event && typeof event === 'String') {
      // we were given the column to sort on as a string
      this.state.sort_column = event;
    } else if (event && event.target) {
      // the sort column to sort on is the result of a click or selection
    }

    let vm = this;

    let sorted = Object.keys(this.{{name | pluralize}}).map(key => vm.{{name | pluralize}}[key]).sort((a,b) => {
      let a_val = a[vm.state.sort_column];
      let b_val = b[vm.state.sort_column];

      if (a_val == b_val) {
        return 0;
      }
      if (a_val < b_val) {
        return vm.state.sort_direction === 'up' ? -1 : 1;
      } else {
        return vm.state.sort_direction === 'up' ? 1 : -1;
      }
    });

    this.setState({list: sorted});
  }

  getRelated(klazz, id) {
    return this.state[klazz].filter((item) => item.id == id)[0]
  }

  componentWillMount() {

    let vm = this;

    // create a ResourceStream and subscribe to events
    this.stream = new ResourceStream("{{name}}", "/{{name | pluralize}}");

    this.stream.on('new:model', message => {
      console.log('new {{name}}', message.data);
      let {{name}} = JSON.parse(message.data);

      vm.{{name | pluralize}}["{{name}}_"+{{name}}.id] = new {{class_name}}("/{{name | pluralize}}", {{name}} );
      vm.sort();
    });

    this.stream.on('update:model', message => {
      console.log('update {{name}}', message.data);
      let {{name}} = JSON.parse(message.data);

      Object.assign(vm.{{name | pluralize}}["{{name}}_"+{{name}}.id], {{name}});

      EventBus.emit('update:model:'+{{name}}.id, {{name}});
      vm.sort();
    });

    this.stream.on('delete:model', message => {
      console.log('delete {{name}}', message.data);
      let {{name}} = JSON.parse(message.data);

      delete vm.{{name | pluralize}}["{{name}}_"+{{name}}.id];
      vm.setState(state => {
        const list = state.list.filter((item, j) => item.id !=  parseInt({{name}}.id));

        return {
         list,
        };
      });
    });

    // fetch and sort the index
    this.stream.all().then((data) => {
      if (data) {
        data.forEach((entry) => {
          let {{name}} =  new {{class_name}}("/{{name | pluralize}}", entry);
          vm.{{name | pluralize}}["{{name}}_"+{{name}}.id] = {{name}};
        })
        vm.sort();
      }
    });

    EventBus.on("cmd:delete:{{name}}", (id) => {
      vm.delete(id);
    })

    // fetch related data
{% for field in visible_fields -%}
  {% if field.type == "reference" -%}
  {% if field.name != "user" -%}
{{" "}}
    new Resource("/{{field.name | pluralize}}").all().then((data) => {
      if (data) {
        let entries = []
        data.forEach((entry) => {
          entries.push(new Resource("/{{field.name | pluralize}}", entry))
        })

        this.setState({ {{field.name | pluralize}}: entries})
      }
    });
  {% endif -%}
  {% endif -%}
{% endfor %}
  }

  // delete an instance of the model
  delete(id) {
    let vm = this;
    let {{name}} = vm.{{name | pluralize}}["{{name}}_"+id];
    {{name}}.destroy().then((res) => {
      delete vm.{{name | pluralize}}["{{name}}_"+id];
      vm.setState(state => {
        const list = state.list.filter((item, j) => item.id !=  parseInt(id));

        return {
         list,
        };
      });
    })

  }

  render() {
    return (
      <{{class_name}}IndexList {{name | pluralize}}={this.state.list} delegate={this}/>
    )
  }
}

export default {{class_name}}Index;

class {{class_name}}IndexList extends React.Component {
  constructor(props) {
    super(props);

  }

  render() {
    return (
      <div>
        <div className="row {{name}}-index-title-row index-title-row">
          <div className="col-sm-11">
            <h2 className="{{name}}-index-title index-title">{{display_name | pluralize}}</h2>
          </div>
          <div className="col-sm-1">
            <div className="{{name}}-index-new-button index-new-button btn btn-secondary btn-xs">
              <Link to="/{{name | pluralize}}/new">New</Link>
            </div>
          </div>
        </div>

        <div className="table-responsive {{name}}-index-table">
          <table className="table table-striped">
            <thead>
              <tr className="{{name}}-index.table-head-row index-table-head-row">
              {% for field in visible_fields -%}
              {% if field.name != "user" %}
                <th className="{{name}}-index-table-head index-table-head">{{field.name | capitalize }}</th>
              {% endif -%}
              {% endfor %}
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              { this.props.{{name | pluralize}} &&
                this.props.{{name | pluralize}}.map((instance,index) => {
                  return (
                    <{{class_name}}IndexItem key={index} {{name}}={instance} delegate={this.props.delegate} />
                  )
                })
              }
            </tbody>
          </table>
        </div>
      </div>
    );
  }
}

class {{class_name}}IndexItem extends React.Component {
  constructor(props) {
    super(props);

    this.state = props.{{name}};
  }

  read(event) {
    event.preventDefault();
    if (event.target.dataset && event.target.dataset.id) {
      let id = event.target.dataset.id;
      console.log("read {{name}}", id )
      EventBus.emit('cmd:show:{{name}}', id);
    }

  }

  edit(event) {
    event.preventDefault();
    if (event.target.dataset && event.target.dataset.id) {
      let id = event.target.dataset.id;
      console.log("edit {{name}}", id)
      EventBus.emit('cmd:edit:{{name}}', id);
    }
  }

  delete(event) {
    event.preventDefault();
    if (event.target.dataset && event.target.dataset.id) {
      let id = event.target.dataset.id;
      if (window.confirm('Are you sure you want to delete this {{name | capitalize}}?')) {
        EventBus.emit('cmd:delete:{{name}}',  id);
      }
    }
  }

  componentDidMount() {

  }

  render() {
    let {{name}} = this.props.{{name}}
{% for field in visible_fields -%}
{% if field.type == "reference" -%}
{% if field.name != "user" -%}
{{"    "}}this.{{field.name}} = this.props.delegate.getRelated("{{field.name | pluralize}}", {{name}}.{{field.name}}_id)
{% endif -%}
{% endif -%}
{% endfor -%}
{{" "}}
    return (
      <tr className="{{name}}-index-table-row index-table-row">
        {% for field in visible_fields -%}
        {% if field.name != "user" -%}
        {% if field.type == "reference" -%}
        <td className="{{name}}-{{field.name}}-index-table-data {{name}}-index-table-data index-table-data">
          <Link to={
            {
              pathname: "{{field.name | pluralize}}/show/" +{{name}}.{{field.name}}_id,
              state: this.{{field.name}} || {}
            }
          }>
          { bestTitleForClass(this.{{field.name}} || {id: {{name}}.{{field.name}}_id}) }</Link>
          </td>
        {% else -%}
          <td className="{{name}}-{{field.name}}-index-table-data {{name}}-index-table-data index-table-data">{ {{name}}.{{field.name}} }</td>
        {% endif -%}
        {% endif -%}
        {% endfor %}
        <td className="{{name}}-index-actions-column index-actions-column">

        <Link to={
          {
            pathname: "/{{name | pluralize}}/edit/"+ {{name}}.id,
            state: {{name}}
          }
        }><i className="material-icons">edit</i></Link>

        <span className="{{name}}-index-actions-delete index-actions-delete"
          onClick={this.delete.bind(this)} data-id={ {{name}}.id }
          >
          <i className="material-icons">delete</i>
        </span>

        <Link to={
          {
            pathname: "/{{name | pluralize}}/show/"+ {{name}}.id,
            state: {{name}}
          }
        }><i className="material-icons">arrow_forward_ios</i></Link>
        </td>
      </tr>
    );
  }

}
